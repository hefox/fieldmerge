<?php


function fieldmerge_action_info() {
  return array('fieldmerge_action' => array(
    'type' => 'node',
    'description' => t('Merge node fields'),
    'configurable' => TRUE,
    'behavior' => array('changes_node_property'),
  ));
}

function fieldmerge_action(&$node, $context) {
  $type = content_types($node->type);
  $fields = $type['fields'];
  $mappings = module_invoke_all('fieldmerge');
  if(empty($context['fields'])) {
    $context['fields'] = array();
  } else {
    $context['fields'] = array_filter($context['fields']);
  }
  if ($context['mapping'] && $mappings[$context['mapping']]) {
    $context['fields'] += $mappings[$context['mapping']] ;
  }
  
  foreach($context['fields'] as $from => $to) {
    if (empty($to) || empty($from) || empty($fields[$to])) continue;
    if ($node->{$from}) {
      $function = $fields[$to]['module'] . '_content_is_empty';
      $empty = 0;
      /* Go through current $to's and remove 'blank' values so new ones can take over*/
      if (!empty($node->{$to}) && function_exists($function)) {
       foreach ($node->{$to} as $delta => $item) {
          if (call_user_func($function,$item,$fields[$to]) == TRUE) {
            unset($node->{$to}[$delta]);
          }
        }
      }
      if (empty($node->{$to})) $node->{$to} = array();
      foreach($node->$from as $value) $node->{$to}[] = $value;
       
      if (!empty($context['wipe'])) $node->$from = array();
    }
  }
}

function fieldmerge_action_form($context) {
  $mappings = module_invoke_all('fieldmerge');
  if ($mappings) {
    // fieldmerge mappings are mappings of key => array(fieldfrom => fieldto))
    $opts = array(''=>t('None'));
    foreach($mappings as $key => $fields) $opts[$key] = check_plain($key); 
    $form['mapping'] = array(
      '#type' => 'select',
      '#default_value' => isset($context['mapping']) ? $context['mapping'] : '',
      '#options' => $opts,
      '#title' => t("Pre-configured Mapping"),
    );
  }
  
  $fields = content_fields();
  $types = array();
  foreach ($fields as $field => $field_info) {
    $types[$field_info['type']][$field] = $field_info;
    $types2[$field_info['type']][$field] = check_plain($field_info['widget']['label']);
  }
  $form['fields'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t("Mappings"),
    '#tree' => true,
  );
  foreach ($types as $type => $_fields) {
    if(count($_fields) > 1) {
      foreach($_fields as $field => $field_info) {
        $form['fields'][$field] = array(
          '#type'=> 'select',
          '#options' => array(''=>t('No merge')) + $types2[$type],
          '#default_value' => isset($context['fields'][$field]) ? $context['fields'][$field] : '',
          '#title' => t('From %field to ', 
              array('%field' => $field_info['widget']['label'])
            ),
        );  
      }
    }
  }
    $form['wipe'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($context['wipe']) ? $context['wipe'] : FALSE,
      '#title' => t("Wipe from field's value on merge."),
    );
  return $form;
}


function fieldmerge_action_submit($form, $form_state) {
  return array(
    'fields' => $form_state['values']['fields'],
    'mapping' => $form_state['values']['mapping'],
    'wipe' => $form_state['values']['wipe'],
  );
}

function fieldmerge_action_validate($form, $form_state) {
  if (empty($form_state['values']['fields']) && empty($form_state['values']['mapping'])) {
      form_set_error('fields', t('You must select at least one field to merge.'));
  }
}

